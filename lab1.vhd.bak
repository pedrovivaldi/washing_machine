-- Insert library and use clauses
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Begin entity declaration
ENTITY lab2 IS
	-- Begin port declaration
	PORT (  
		-- Declare data inputs and outputs
		CLOCK_50MHz : IN STD_LOGIC;
		LEDM_C      : OUT STD_LOGIC_VECTOR (4 DOWNTO 0);
		LEDM_R      : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
		SW          : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
		GPIO_0		: OUT STD_LOGIC_VECTOR (16 DOWNTO 0);
		KEY         : IN STD_LOGIC_VECTOR (11 DOWNTO 0);
		DISP0_D		: OUT STD_LOGIC_VECTOR (0 TO 7)
	);
-- End entity 
END;

-- Begin architecture 
ARCHITECTURE rtl OF lab2 IS
-- Declare signals
	CONSTANT DEMO01 : STD_LOGIC_VECTOR (2 DOWNTO 0) := "000";
	CONSTANT DEMO02 : STD_LOGIC_VECTOR (2 DOWNTO 0) := "001";
	CONSTANT DEMO03 : STD_LOGIC_VECTOR (2 DOWNTO 0) := "010";
	CONSTANT LIBBOL : STD_LOGIC_VECTOR (2 DOWNTO 0) := "011";
	CONSTANT MODOJO : STD_LOGIC_VECTOR (2 DOWNTO 0) := "100";
	CONSTANT M10PTS : STD_LOGIC_VECTOR (2 DOWNTO 0) := "101";
	CONSTANT M100PT : STD_LOGIC_VECTOR (2 DOWNTO 0) := "110";
	CONSTANT GAMEOV : STD_LOGIC_VECTOR (2 DOWNTO 0) := "111";
	SIGNAL ESTADO : STD_LOGIC_VECTOR (2 DOWNTO 0) := "000";
	SIGNAL COUNTER : STD_LOGIC_VECTOR (31 DOWNTO 0) := (OTHERS => '0');
	SIGNAL PONTUACAO : STD_LOGIC_VECTOR (16 DOWNTO 0) := (OTHERS => '0');
	
BEGIN
	
	LEDM_C <= "11110";
	LEDM_R(7 DOWNTO 3) <= (OTHERS=>'1');
	DISP0_D(3 TO 7) <= (OTHERS=>'0');
	LEDM_R(2 DOWNTO 0) <= NOT ESTADO;
	
	GPIO_0 <= PONTUACAO;
	
	-- INDICADOR DE PONTUACAO
	WITH ESTADO SELECT
		DISP0_D(0) <= '1' WHEN DEMO01,
							'1' WHEN M10PTS,
							'1' WHEN M100PT,
							'0' WHEN OTHERS;
	
	-- INDICADOR DE GAME OVER
	WITH ESTADO SELECT
		DISP0_D(1) <= '1' WHEN DEMO02,
							'1' WHEN GAMEOV,
							'0' WHEN OTHERS;
							
	-- INDICADOR PREMIO
	WITH ESTADO SELECT
		DISP0_D(2) <= '1' WHEN DEMO03,
							'0' WHEN OTHERS;

	PROCESS(KEY, CLOCK_50MHz)
	BEGIN
		IF (RISING_EDGE(CLOCK_50MHz)) THEN
			IF (ESTADO = DEMO01 AND COUNTER = 150000000) THEN
				ESTADO <= DEMO02;
				COUNTER <= (OTHERS => '0');
			ELSIF (ESTADO = DEMO02 AND COUNTER = 150000000) THEN 
				ESTADO <= DEMO03;
				COUNTER <= (OTHERS => '0');
			ELSIF (ESTADO = DEMO03 AND COUNTER = 150000000) THEN
				ESTADO <= DEMO01;
				COUNTER <= (OTHERS => '0');
			ELSIF ((ESTADO = DEMO01 OR ESTADO = DEMO02 OR ESTADO = DEMO03) AND KEY(0) = '1') THEN
				ESTADO <= LIBBOL;
				COUNTER <= (OTHERS => '0');
			ELSIF (ESTADO = LIBBOL AND COUNTER = 50000000) THEN
				ESTADO <= MODOJO;
				PONTUACAO <= (OTHERS => '0');
			ELSIF (ESTADO = MODOJO AND KEY(1)='1') THEN
				ESTADO <= M10PTS;
				PONTUACAO <= PONTUACAO + 10;
				COUNTER <= (OTHERS => '0');
			ELSIF (ESTADO = MODOJO AND KEY(2)='1') THEN
				ESTADO <= M100PT;
				PONTUACAO <= PONTUACAO + 100;
				COUNTER <= (OTHERS => '0');
			ELSIF ((ESTADO = M10PTS OR ESTADO = M100PT) AND COUNTER = 50000000) THEN
				ESTADO <= MODOJO;
			ELSIF (KEY(3)='1') THEN
				ESTADO <= GAMEOV;
				COUNTER <= (OTHERS =>'0');
			ELSIF (ESTADO = GAMEOV AND COUNTER = 50000000) THEN
				ESTADO <= DEMO01;
				COUNTER <= (OTHERS => '0');
			ELSE
				COUNTER <= COUNTER +1;
			END IF;
		END IF;
		
	END PROCESS;
	
-- End architecture
END;

